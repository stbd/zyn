#!/usr/bin/env python

import argparse
import base64
import getpass
import os
import os.path
import subprocess
import sys
import tempfile
import time

import zyn_docker


PATH_DIR = os.path.dirname(os.path.abspath(__file__))
PATH_IMAGE = PATH_DIR + '/zyn'
PATH_SCRIPT_TO_PACK_ZYN_SRC = PATH_IMAGE + '/create-zyn-src-tar.sh'
PATH_ZYN_SRC = PATH_IMAGE + '/zyn-src.tar.gz'
IMAGE_TAG = 'zyn'
PATH_TEMP_FOLDER = PATH_DIR + '/.tmp'


def _base64_file_in_temp_folder(filename, content):
    path_file = '{}/{}'.format(PATH_TEMP_FOLDER, filename)
    with open(path_file, 'w') as fp:
        fp.write(base64.b64encode(content))
    return path_file


def _delete_file(path):
    _, _, _, _, _, _, size, _, _, _ = os.stat(path)
    open(path, 'wb').write(os.urandom(size))
    os.remove(path)


def _main():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description='Tools to run Zyn server in Docker container',
        epilog='''
Example:
run-zyn-in-docker $PWD/private.key 1234 $PWD/fullchain.pem $PWD/privkey.pem --init --bind-to "localhost:8080" --  --memory 2g --detach --rm
'''
    )
    parser.add_argument(
        'path-private-key',
        help='Path to exported GPG private key that will be used for encryption'
    )
    parser.add_argument(
        'gpg-fingerprint',
        help='Fingerprint of the key used for encrypting'
    )
    parser.add_argument(
        'path-cert-pem',
        help='Path to exported certifcation pem file that will be used for TLS'
    )
    parser.add_argument(
        'path-key-pem',
        help='Path to exported key pem file that will be used for TLS'
    )
    parser.add_argument(
        '--bind-to',
        default="127.0.0.1:8080",
        type=str,
        help='IP and/or port pair to which bind Docker container'
    )
    parser.add_argument(
        '--log-level',
        choices=['trace', 'debug', 'info', 'warn', 'error'],
        default='info',
        help='Log level for Zyn server'
    )
    parser.add_argument(
        '--init',
        action='store_true',
        help='Initialize system and of its settings. Required' \
        'when server is run for the first time',
    )
    parser.add_argument(
        '--path-data',
        default=None,
        help='Path to folder that will be mounted to container and which will' \
        'hold data stored by server. If left empty, data will be only in container'
    )
    parser.add_argument(
        '--skip-packing-src',
        action='store_true',
        help='Do not pack Zyn sources to new tar. This is useful when working with' \
        'Docker configuration, as it avoids constantly needing to rebuilding image',
    )


    system_args = sys.argv[1:]
    docker_args = []
    if '--' in system_args:
        docker_args = system_args[system_args.index('--') + 1:]
        system_args = system_args[:system_args.index('--')]
    args = vars(parser.parse_args(system_args))

    print(args)

    if not args['skip_packing_src']:
        if os.path.exists(PATH_ZYN_SRC):
            os.remove(PATH_ZYN_SRC)
        zyn_docker.execute_script(PATH_SCRIPT_TO_PACK_ZYN_SRC, PATH_DIR)

    zyn_docker.build_image(IMAGE_TAG, PATH_IMAGE, PATH_DIR)

    if not args['skip_packing_src']:
        os.remove(PATH_ZYN_SRC)

    if os.path.exists(PATH_TEMP_FOLDER):
        print('Temp folder "{}" already exists, deleting it'.format(PATH_TEMP_FOLDER))
        for element in os.listdir(PATH_TEMP_FOLDER):
            _delete_file('{}/{}'.format(PATH_TEMP_FOLDER, element))
        os.rmdir(PATH_TEMP_FOLDER)

    path_fingerprint = None
    path_password = None

    try:
        password = getpass.getpass('Password for private GPG key: ')
        os.mkdir(PATH_TEMP_FOLDER)
        path_fingerprint = _base64_file_in_temp_folder('file-1', args['gpg-fingerprint'])
        path_password = _base64_file_in_temp_folder('file-2', password)

        run_cmd = [
            'docker',
            'run',
            '-v', '{}:{}'.format(args['path-private-key'], '/zyn-configuration/gpg-private-key'),
            '-v', '{}:{}'.format(args['path-cert-pem'], '/zyn-configuration/cert.pem'),
            '-v', '{}:{}'.format(args['path-key-pem'], '/zyn-configuration/key.pem'),
            '-v', '{}:{}'.format(path_fingerprint, '/zyn-configuration/gpg-fingerprint'),
            '-v', '{}:{}'.format(path_password, '/zyn-configuration/gpg-password'),
            '-e', 'RUST_LOG={}'.format(args['log_level']),
            '-p', '{}:8080/tcp'.format(args['bind_to']),
        ] + docker_args

        if args['path_data']:
            run_cmd += ['-v', '{}:{}'.format(args['path_data'], '/zyn-data')]

        run_cmd += ['{}:latest'.format(IMAGE_TAG)]

        # Address to which Zyn server is bound inside Docker container
        run_cmd += ['--local-address', '172.17.0.2']

        if args['init']:
            run_cmd += ['--init']

        print (run_cmd)
        is_daemon = '--detach' in run_cmd or '-d' in run_cmd

        process = subprocess.Popen(
            run_cmd,
            cwd=PATH_DIR,
            stdout=sys.stdout,
            stderr=sys.stderr,
        )
        process.communicate()
        if is_daemon:
            time.sleep(5)

    finally:
        if os.path.exists(PATH_TEMP_FOLDER):
            if path_fingerprint is not None:
                _delete_file(path_fingerprint)
            if path_password is not None:
                _delete_file(path_password)
            os.rmdir(PATH_TEMP_FOLDER)


if __name__ == '__main__':
    _main()
